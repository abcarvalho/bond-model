
using Interpolations
using Distributed
using DataFrames
using Printf
using JLD
using CSV
using Dierckx
using Dates
using PyPlot
# using PyCall
using Seaborn
using LaTeXStrings

main_path = "/home/artur/BondPricing"
module_path = string(main_path, "/", "Julia/modules/")
modls = ["Batch", "ModelObj", "AnalyticFunctions", 
         "BondPrInterp", "EqFinDiff", "ModelPlots"]
for modl in modls
    include(string(joinpath(module_path, modl), "/", modl, ".jl"))
end


# CVM Plots Inputs ###################################################
cvm_m=1.
obj_funs=[:firm_value, :mbr]
fig_dpi=400
fig_aspect=.55
graph_format="png"
return_fig=false
# ####################################################################

bt = Batch.BatchObj()
for obj_fun in obj_funs
    pt = ModelPlots.PlotsObj(bt; firm_obj_fun=obj_fun, cvm_m=cvm_m, svm_m =1.)

    for var in keys(ModelPlots.vartitles)
        ModelPlots.plot_cvm_optimal_solutions(pt, var;
                                              figaspect=fig_aspect,
                                              fig_dpi=fig_dpi,
                                              save_fig=true,
                                              graph_format=graph_format,
                                              return_fig=return_fig)
        PyPlot.close()
    end
end

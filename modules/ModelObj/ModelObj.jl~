module ModelObj

using Parameters
using CSV
using JLD
using DataFrames

bpr_inputs_dict = Dict{Symbol, Real}(:vtmax => 1.2,
                                     :vtN => 15,
                                     :ttmN => 10, 
                                     :vbhlmin => .6,
                                     :vbhlmax => 1.4,
                                     :vbhlN => 11,
                                     :vmax => 1.5,
                                     :vN => 10^3,
                                     :uN => 10^3,
                                     :vtN_ref => 600,
                                     :ttmN_ref => 450,
                                     :vbhlN_ref => 550)

obj_params = [:mu_b, :m, :c, :p, :vbl, :vbh]
firm_params = [:V0, :alpha, :pi, :r, :gross_delta, :iota,
               :xi, :kappa, :lambda, :sigmal, :sigmah]
  
include("model_structs.jl")
include("model_set_funs.jl")
include("model_load_funs.jl")


function extract_param(svm, pname::Symbol)
    val = NaN
    
    svm_pos = findall(x -> x==pname, [x for x in fieldnames(typeof(svm))])
    svm_pm_pos = findall(x -> x==pname, [x for x in fieldnames(typeof(svm.pm))])
    
    if length(svm_pos) > 0
        # return getfield(svm, fieldnames(svm)[svm_pos[1]])
        return getfield(svm, fieldnames(typeof(svm))[svm_pos[1]])
    else
        # return getfield(svm.pm, fieldnames(svm.pm)[svm_pm_pos[1]])
        return getfield(svm.pm, fieldnames(typeof(svm.pm))[svm_pm_pos[1]])
    end
end

function get_obj_model(svm::Firm)
    return any([svm.model == "cvm",
                isnan(svm.pm.lambda),
                isnan(svm.pm.sigmah)]) ? "cvm" : "svm"
end

include("model_constructors.jl")

end

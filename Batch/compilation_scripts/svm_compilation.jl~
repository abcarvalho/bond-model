
using Distributions
using Interpolations
using Distributed
using DataFrames
using Printf
using JLD
using CSV
using Dierckx
using Dates

main_path = "/home/artur/BondPricing"
module_path = string(main_path, "/", "Julia/modules/")
modls = ["ModelObj", "AnalyticFunctions", 
         "BondPrInterp", "EqFinDiff", "Batch"]
for modl in modls
    include(string(joinpath(module_path, modl), "/", modl, ".jl"))
end

# #########################################################
# ######################## INPUTS #########################
# #########################################################
# Debt Maturity
m = 1.

# Firms' Objective Functions
obj_funs = [:firm_value, :MBR]

# Run Diagnostics
diagnose=true

# Compile Results to find Optimal Capital Structure
compilation=false

# List to store DFs
DFs = []

# Whether to return the results to user interface
return_results=true
# #########################################################

# #########################################################
# ###################### DIAGNOSTICS ######################
# #########################################################
if diagnose
    bt = Batch.get_bt(comb_num=1, display_msgs=false)
    diagdf = Batch.diagnosis(bt)
    push!(DFs, diagdf)
end
# #########################################################


# #########################################################
# ###################### COMPILATION ######################
# #########################################################
if compilation
    for of in obj_funs
        optDF = @time Batch.compile_svm_opt_results(bt; m=1.,
                                                    firm_obj_fun=of)
        push!(DFs, optDF)
    end
end
# #########################################################

if return_results
    return DFs
end

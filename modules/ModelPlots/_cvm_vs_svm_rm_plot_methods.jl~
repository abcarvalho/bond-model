
function max_rm_iota(ax; max_rm_iota::Float64=NaN, )
    yinterp = Dierckx.Spline1D(sfdf[xvar], sfdf[yvar]; k=3, bc="extrapolate")
    xgrid = range(minimum(sfdf[xvar]), stop=maximum(sfdf[xvar]), length=10^5)
    if .&(isnan(max_rm_iota), yvar == :firm_value)
        max_rm_iota = xgrid[argmin(abs.(yinterp(xgrid) .- rfdf[1, yvar]))]
    end
    
    if !isnan(max_rm_iota)
        ax.axvline(max_rm_iota, 
                   color="black",
                   linewidth=.5, 
                   linestyle="--", 
                   marker=svmmarkers[1])
        
        
        lim = ax.get_xlim()
        ax.set_xticks(vcat(ax.get_xticks(), [max_rm_iota]))
        xlabels = [abs.(x-max_rm_iota)^2<1e-5 ? "\$\\hat{\\iota}\$" : x for x in ax.get_xticks()]
        ax.set_xticklabels(xlabels)
        ax.set_xlim(lim)
    end
end

function plot_sf_curve(ax, yvar::Symbol, sfdf::DataFrame;
                       sflinestyles::Array{String,1}=ModelPlots.cvmlinestyles,
                       sfmarkers::Array{String,1}= ModelPlots.cvmmarkers)
    ax.plot(sfdf[xvar], sfdf[yvar];
            color="green", 
            linewidth=1,
            linestyle=sflinestyles[1],
            marker=sfmarkers[1], 
            markersize=3)

#     # Add Legend to the Curves
#     cvm_label = latexstring("\$", ModelPlots.cvs_xlabels[:kappa_otc][1], "=\$ ",
#                             ModelPlots.str_format_fun(ModelPlots.cvs_xlabels[:kappa_otc][2], 
#                                                       sfdf[1,:kappa]))
#     ax.text(sfdf[end, xvar], sfdf[end, yvar],
#             cvm_label, fontsize=10, va="bottom")

    return ax
end



function cvm_svm_rm_plotfun(pt, xvar::Symbol, yvar::Symbol,
                            cvm_combs::Array{Int64,1},
                            svm_combs::Array{Int64,1};
                            max_rm_iota::Float64=NaN,
                            cvmlinestyles::Array{String,1}= ModelPlots.cvmlinestyles,
                            cvmmarkers::Array{String,1}= ModelPlots.cvmmarkers,
                            svmlinestyles::Array{String,1}= ModelPlots.svmlinestyles,
                            svmmarkers::Array{String,1}= ModelPlots.svmmarkers,
                            color_regions::Bool=true,
                            figaspect::Float64=.5, 
                            figpad::Float64=1.8, 
                            save_fig::Bool=false,
                            figPathName=nothing)
    
    sfdf = pt.cvm_data[[(x in cvm_combs) for x in pt.cvm_data[:comb_num]], :]
    rfdf = pt.svm_data[[(x in svm_combs) for x in pt.svm_data[:comb_num]], :]
    
    # Iota and Kappa in Basis Points
    for x in [:iota, :kappa]
        sfdf[x] = sfdf[x] .* 1e4
        rfdf[x] = rfdf[x] .* 1e4
    end
    
    Seaborn.set(style="darkgrid")
    fig = PyPlot.figure(figsize=Tuple(PyPlot.figaspect(figaspect)))
    ax = fig.add_subplot(111)
    
    # ##############################################################       
    # Plot CVM Curve ###############################################
    # ##############################################################   
    ax = plot_sf_curve(ax, yvar, sfdf;
                       sflinestyles=cvmlinestyles,
                       sfmarkers=cvmmarkers)
    # ##############################################################
    
    
    # ##############################################################       
    # Maximum Risk-Management Cost #################################
    # ##############################################################
    yinterp = Dierckx.Spline1D(sfdf[xvar], sfdf[yvar]; k=3, bc="extrapolate")
    xgrid = range(minimum(sfdf[xvar]), stop=maximum(sfdf[xvar]), length=10^5)
    if .&(isnan(max_rm_iota), yvar == :firm_value)
        max_rm_iota = xgrid[argmin(abs.(yinterp(xgrid) .- rfdf[1, yvar]))]
    end

    if !isnan(max_rm_iota)
        ax.axvline(max_rm_iota, 
                   color="black",
                   linewidth=.5, 
                   linestyle="--", 
                   marker=svmmarkers[1])
    
    
        lim = ax.get_xlim()
        ax.set_xticks(vcat(ax.get_xticks(), [max_rm_iota]))
        xlabels = [abs.(x-max_rm_iota)^2<1e-5 ? "\$\\hat{\\iota}\$" : x for x in ax.get_xticks()]
        ax.set_xticklabels(xlabels)
        ax.set_xlim(lim)
    end    
    # ##############################################################
    
    
    # ##############################################################       
    # Region: No Risk-Management is Optimal ########################
    # ##############################################################
    if .&(!isnan(max_rm_iota), color_regions)
        xmin, xmax = ax.get_xlim()
        ymin, ymax = ax.get_ylim()

        trans = PyPlot.matplotlib.transforms.blended_transform_factory(ax.transData, ax.transAxes)
        yloc = .85 * ymin + .15 * ymax
        if yvar in [:equity, :firm_value, :MBR]
            yloc = .1*ymin + .9*ymax
        end
        ax.fill_between(xgrid, 0, 1, transform=trans,
                    where=xgrid .<= max_rm_iota,
                    facecolor="#76D7C4", alpha=0.25)

        ax.text(.5 * max_rm_iota + .5 * xmax, yloc,
                "No Risk-Management is optimal",
                horizontalalignment="center",
                verticalalignment="center",
                fontsize=12,
                style="italic",
                bbox=Dict("facecolor" => "#EE0839", "alpha" => 0.5, "pad" => 10))
    end
    # ##############################################################
    
    # Region II 
    if .&(!isnan(max_rm_iota), color_regions)
        yloc = .7*ymin + .3*ymax
        ax.fill_between(xgrid, 0, 1, transform=trans,
                        where=xgrid .>= max_rm_iota,
                        facecolor="blue", alpha=0.15)
        
        ax.text(max_rm_iota / 2, yloc,
                "Risk-Management \n is optimal",
                horizontalalignment="center",
                verticalalignment="center",
                fontsize=12,
                style="italic",
                bbox=Dict("facecolor" => "#EE0839", "alpha" => 0.5, "pad" => 10))
    end
    
    # ##############################################################       
    # Plot SVM Curve ###############################################
    # ##############################################################
    # Because SVM is now a horizontal curve, it must come after 
    # the CVM curve for legend placement purposes (x axis)

    # Plot Curve
    ax.axhline(rfdf[1, yvar], 
               color="blue",
               linewidth=1, 
               linestyle=svmlinestyles[1], 
               marker=svmmarkers[1])
    
    svm_label = latexstring("(\$", 
                            ModelPlots.cvs_xlabels[:iota][1], ", ",
                            ModelPlots.cvs_xlabels[:lambda][1], ", ",
                            ModelPlots.cvs_xlabels[:sigmah][1],
                            "\$) = (",
                            rfdf[1, :iota], ", ",
                            rfdf[1, :lambda], ", ", 
                            rfdf[1, :sigmah], ")")
    xmin, xmax = ax.get_xlim()
    ax.text(.75 * xmax,  rfdf[end, yvar],
            svm_label, fontsize=10, va="bottom")
    # ##############################################################
    
    
    # Add Legend to the Curves
#     svm_label = "($\\kappa^{{EP}} =$" + str(svm_slice['kappa (bp)'].values[0]) +\
#                 ", $\\lambda =$" + str(svm_slice['lambda'].values[0]) +\
#                 ", $\\sigma_h =$" + str(svm_slice['sigmah'].values[0]) + ")"
#     ax.text(.9 * cvm_slice[xvar].values[-1], svm_slice[yvar].values[-1],
#             svm_label, fontsize=10, va='bottom')


    # ##############################################################       
    # ################### Plot Labels and Titles ###################
    # ##############################################################

    # Label Axes 
    ax.set_xlabel(string("Risk Management Cost \$", ModelPlots.cvs_xlabels[xvar][1], "\$ (b.p.)"), labelpad=10)
    ax.set_ylabel(ModelPlots.cvs_ylabels[yvar], labelpad=10)
    
    # Set Title
    title_params = join([string("\$", ModelPlots.tlabels[x][1], "= \$ ",
                                ModelPlots.str_format_fun(ModelPlots.tlabels[x][2], rfdf[1, x]))
                         for x in ModelPlots.cvs_rm_plots_title_params_order], ", ")
    plot_title = latexstring(ModelPlots.cvs_ylabels[yvar], " under Full Information \n", 
                             " for ", title_params)
    fig.suptitle(plot_title, fontsize=14)
    ax.set_title(" ") 
    # ax.set_title("\n \$\\kappa\$ and \$\\iota\$ values in b.p.)", fontsize=12)
    # ##############################################################
    
    
    # For some reason, y limits are not matching axis ylim.
    # Force reset:
    ax.set_ylim([ymin, ymax])
    
    if !isnan(figpad)
        fig.tight_layout(pad=figpad)
    end

    if save_fig
#HERE        fig_folder, fig_name = ....
#        plt.savefig(string(fig_folder, "/", fig_name), dpi=fig_dpi, bbox_inches="tight")
    end
#  display(fig)
    return fig, max_rm_iota
end
